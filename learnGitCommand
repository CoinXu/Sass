# Git学习笔记
#### 要对现有的某个项目开始用Git
1. 到项目所在的目录
    $ cd g:\Sass
2. 执行命令
    $ git init
初始化之后，当前目录会出现一个.git的目录，如果当前目录下有几个文件想要纳入版本控制，需要先用 `git add` 命令告诉Git开始对这些文件进行跟踪，然后提交

    $ git add *.c
    $ git add README
    $ git commit -m 'initial project version'
 现在已经得到一个Git仓库

### 从现有仓库clone
如果想对某个开源项目出一份力，可以先把该项目的Git仓库复制一份出来。命令格式为 `git clone [url]` 
    $ git cone git://github.com/schacon/grit.git
这会在当前目录下创建一个名为`grit`的目录

如果希望在clone的时候，自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：
    $ git clone git://github.com/schacon/grit.git mygrit
Git支持许多数据传输协议，之前用的是`git://`，也可以使用`http(s)://`或`user@server://path.git`表示SSH传输协议

# 记录每次更新到仓库
确定哪些文件处于什么状态，可以用`git status`，若clone仓库之后立即执行此命令，会看到类似的输出

    $ git status
    on branch master
    nothing to commit,working directory clean

这说明工作目录相当干净，所有已跟踪文件在上次提交后都没有被更改过。

现在新建一个README.md文件，再执行`git status`就会发现__Untrancked files__

### 跟踪一个新文件
    $ git add README
此时再运行`git status`，会看到README已被跟踪，处于暂存状态
`git add [path]`，[path]可以是文件或目录路径，如果是目录的话，就跟踪该目录下的所有文件。

### 忽略某些文件
我们可以创建一个名为.gitignore的文件，列出要忽略的文件模式。
    $ cat .gitignore
    *.[oa]     // 忽略以.o或.a结尾的文件
    *~          // 忽略所有以~结尾的文件
    !*.js        // 不要忽略以.js结尾的文件

    # 此为注释 – 将被 Git 忽略
    # 忽略所有 .a 结尾的文件
    *.a
    # 但 lib.a 除外
    !lib.a
    # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO
    /TODO
    # 忽略 build/ 目录下的所有文件
    build/
    # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt
doc/*.txt
# ignore all .txt files in the doc/ directory
doc/**/*.txt

### `git diff` 查看暂存前后的变化
高版本可以使用`git diff --cached`和`git diff --staged`

# 提交更新
提交之前，先看下有什么是没有add过
    $ git status
之后再提交
    $ git commit

### 跳过暂存提交
    $ git commit -a
Git就会自支把所有已经跟踪过的文件暂存起来一起提交，从而跳过`git add`步骤

# 移除文件
要移除某个文件，就要从已跟踪文件清单中移除，然后提交。可以用`git rm`完成
    $ rm index.js    // 这样只是将 index.js从暂存清单中删除，需要再运行一次
    $ git rm index.js    // 这样就完全删除了文件

>
另外一种情况：只从Git仓库中删除，但是不删除目录文件
    $ git rm --cached readme.txt
后面可以列出文件或者__目录__的名字
比方说：
    $  git rm log/\*.log    // 此命令删除所有log/目录下扩展名为.log的文件

# 移动文件
在Git中对文件改名，可以这么做
    $ git mv file_form file_to
比如
    $ git mv README.txt README
其实，运行`git mv`就相当于运行了下面三条命令
    $ mv README.txt README
    $ git rm README.txt
    $ git add README

# 查看提交历史
在提交了若干次更新之后一，又或者clone了某个项目，想回顾下提交历史，可以使用 `git log` 查看
    $ git log
会把所有更新时间全列出来，最近更新的在最上面
    $ git log -p -2    // 显示每次提交内容的差异，仅显示最近两次更新
    $ git log --stat   // 显示简要的增改行数统计
    
__ $ git log --pretty=format:"%h - %an, %ar : %s" __

+ %H    提交对象（commit）的完整哈希字串
+ %h    提交对象的简短哈希字串
+ %T    树对象（tree）的完整哈希字串
+ %t    树对象的简短哈希字串
+ %P    父对象（parent）的完整哈希字串
+ %p    父对象的简短哈希字串
+ %an   作者（author）的名字
+ %ae   作者的电子邮件地址
+ %ad   作者修订日期（可以用 -date= 选项定制格式）
+ %ar   作者修订日期，按多久以前的方式显示
+ %cn   提交者(committer)的名字
+ %ce   提交者的电子邮件地址
+ %cd   提交日期
+ %cr   提交日期，按多久以前的方式显示
+ %s    提交说明
________________________________________________________________________________________

以上只是简单介绍了一些 `git log` 命令支持的选项，下面还列出了一些其他常用的选项及其释义。
________________________________________________________________________________________

+ -p	             按补丁格式显示每个更新之间的差异。
+ --word-diff	     按 word diff 格式显示差异。
+ --stat	         显示每次更新的文件修改统计信息。
+ --shortstat	     只显示 --stat 中最后的行数修改添加移除统计。
+ --name-only	     仅在提交信息后显示已修改的文件清单。
+ --name-status	     显示新增、修改、删除的文件清单。
+ --abbrev-commit	 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。
+ --relative-date	 使用较短的相对时间显示（比如，“2 weeks ago”）。
+ --graph	         显示 ASCII 图形表示的分支合并历史。
+ --pretty	         使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。
+ --oneline	         --pretty=oneline --abbrev-commit 的简化用法。

# 撤消操作

### 修改最后一次提交
    $ git commit --amend
    // 此命令将使用当前暂存区的快照提交
    $ git commit -m 'initial commit'
    $ git add forgotten_file
    $ git commit --amend
    // 上面三条命令只产生一个提交，第一个提交命令修正了第一个提交的内容

### 取消已经暂存的文件
     $ git reset HEAD benchmarks.rb
### 取消对文件的修改
    $ git checkout -- benchmarks.rb
__________________________________________
# 远程仓库的使用
### 查看当前的远程库
     $ git remote    // 如果有多个远程仓库，将全部列出

### 添加远程仓库
    // $ git remote [shortname] [url]
    $ git remote add pb git://github.com/paulboone/ticgit.git
### 从远程仓库抓取数据
    $ git fetch [remote-name]
### 推送数据到远程仓库
    $ git push [remote-name] [branch-name]
### 查看远程仓库信息
    $ git remote show origin
### 远程仓库的删除和重命名
    $ git remote rename [current-name] [new-name]
    $ git remote rm [remote-name]




